type ServerTCP struct {
	listenAddr string
	listener   net.Listener

	quitch   chan struct{}
	Sessions []Session
}

type Session struct {
	conn net.Conn
}

func NewServer(listenAddr string) *ServerTCP {
	return &ServerTCP{
		listenAddr: listenAddr,
		quitch:     make(chan struct{}),
	}
}

func (s *ServerTCP) Start() error {
	ln, err := net.Listen("tcp", s.listenAddr)
	if err != nil {
		return err
	}
	defer ln.Close()
	s.listener = ln
	go s.acceptLoop()
	<-s.quitch
	return nil
}

func (s *ServerTCP) acceptLoop() {
	for {
		conn, err := s.listener.Accept()
		if err != nil {
			// fmt.Println ("accept error: ", err)
			continue
		}
		fmt.Println("connect ", conn.RemoteAddr())
		go s.readLoop(conn)
	}
}

func (s *ServerTCP) readLoop(conn net.Conn) {
	defer conn.Close()
	buf := make([]byte, 65535)
	for {
		n, err := conn.Read(buf)
		if err != nil {
			fmt.Println("read error ", err)
			continue
		}
		msg := buf[:n]
		response := ">"
		conn.Write([]byte(response))
		fmt.Println(msg)
	}
}

// -----------------------------------------------------------------------------------------------------------
var Port string
var OnConnect func(conn net.Conn)
var OnCmd func(conn net.Conn, data string)

func Init() {
	listen, err := net.Listen("tcp", Port)
	if err != nil {
		log.Fatal(err)
		return
		//os.Exit(1)
	}
	// close listener
	defer listen.Close()

	for {
		conn, err := listen.Accept()
		if err != nil {
			log.Fatal(err)
			return
			//os.Exit(1)
		}
		if OnConnect != nil {
			OnConnect(conn)
		}

		go handleRequest(conn)
	}
}

func handleRequest(conn net.Conn) {
	defer conn.Close()

	lCmd := bufio.NewScanner(conn)
	for lCmd.Scan() {
		data := lCmd.Text()

		if OnCmd != nil {
			OnCmd(conn, data)
		}
	}

	// incoming request
	//	buffer := make([]byte, 1024)
	//	_, err := conn.Read(buffer)
	//	if err != nil {
	//		log.Fatal(err)
	//	}

	//	if OnCmd != nil {
	//		OnCmd(conn, string(buffer[:]))
	//	}
	// write data to response
	//time := time.Now().Format(time.ANSIC)
	//responseStr := fmt.Sprintf("Your message is: %v. Received time: %v", string(buffer[:]), time)
	//conn.Write([]byte(responseStr))

	// close conn
	//conn.Close()
}
